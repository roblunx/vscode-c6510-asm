
export let cia1regs:any = {

"$dc00": "Port A, keyboard matrix columns and joystick #2.\n" +
         " * Read bits:\n" +
         "   * Bit #0: 0 = Port 2 joystick up pressed.\n" +
         "   * Bit #1: 0 = Port 2 joystick down pressed.\n" +
         "   * Bit #2: 0 = Port 2 joystick left pressed.\n" +
         "   * Bit #3: 0 = Port 2 joystick right pressed.\n" +
         "   * Bit #4: 0 = Port 2 joystick fire pressed.\n" +
         " * Write bits:\n" +
         "   * Bit #x: 0 = Select keyboard matrix column #x.\n" +
         "   * Bits #6-#7: Paddle selection; %01 = Paddle #1; %10 = Paddle #2.\n",

"$dc01":
         "Port B, keyboard matrix rows and joystick #1. Bits:\n" +
         " * Bit #x: 0 = A key is currently being pressed in keyboard matrix row #x, in the column selected at memory address $DC00.\n" +
         " * Bit #0: 0 = Port 1 joystick up pressed.\n" +
         " * Bit #1: 0 = Port 1 joystick down pressed.\n" +
         " * Bit #2: 0 = Port 1 joystick left pressed.\n" +
         " * Bit #3: 0 = Port 1 joystick right pressed.\n" +
         " * Bit #4: 0 = Port 1 joystick fire pressed.\n",

"$dc02": "Port A data direction register.\n" +
         " * Bit #x: 0 = Bit #x in port A can only be read; 1 = Bit #x in port A can be read and written.\n",

"$dc03": "Port B data direction register.\n" +
         " * Bit #x: 0 = Bit #x in port B can only be read; 1 = Bit #x in port B can be read and written.\n",

"$dc04": "Timer A (Low byte).\n" +
         " * Read: Current timer value.\n" +
         " * Write: Set timer start value.\n",

"$dc05": "Timer A (High byte).\n" +
         " * Read: Current timer value.\n" +
         " * Write: Set timer start value.\n",

"$dc06": "Timer B (Low byte).\n" +
         " * Read: Current timer value.\n" +
         " * Write: Set timer start value.\n",

"$dc07": "Timer B (High byte).\n" +
         " * Read: Current timer value.\n" +
         " * Write: Set timer start value.\n",

"$dc08": "Time of Day, tenth seconds (in BCD). Values: $00-$09.\n" +
         " * Read: Current TOD value.\n" +
         " * Write: Set TOD or alarm time.\n",

"$dc09": "Time of Day, seconds (in BCD). Values: $00-$59.\n" +
         " * Read: Current TOD value.\n" +
         " * Write: Set TOD or alarm time.\n",

"$dc0a": "Time of Day, minutes (in BCD). Values: $00-$59.\n" +
         " * Read: Current TOD value.\n" +
         " * Write: Set TOD or alarm time.\n",

"$dc0b": "Time of Day, hours (in BCD).\n" +
         " * Read bits:\n" +
         "   * Bits #0-#5: Hours.\n" +
         "   * Bit #7: 0 = AM; 1 = PM.\n" +
         " * Write: Set TOD or alarm time.\n",

"$dc0c": "Serial shift register. (Bits are read and written upon every positive edge of the CNT pin.)",

"$dc0d":
         "Interrupt control and status register.\n" +
         " * Read bits:\n" +
         "   * Bit #0: 1 = Timer A underflow occurred.\n" +
         "   * Bit #1: 1 = Timer B underflow occurred.\n" +
         "   * Bit #2: 1 = TOD is equal to alarm time.\n" +
         "   * Bit #3: 1 = A complete byte has been received into or sent from serial shift register.\n" +
         "   * Bit #4: Signal level on FLAG pin, datasette input.\n" +
         "   * Bit #7: An interrupt has been generated.\n" +
         " * Write bits:\n" +
         "   * Bit #0: 1 = Enable interrupts generated by timer A underflow.\n" +
         "   * Bit #1: 1 = Enable interrupts generated by timer B underflow.\n" +
         "   * Bit #2: 1 = Enable TOD alarm interrupt.\n" +
         "   * Bit #3: 1 = Enable interrupts generated by a byte having been received/sent via serial shift register.\n" +
         "   * Bit #4: 1 = Enable interrupts generated by positive edge on FLAG pin.\n" +
         "   * Bit #7: Fill bit; bits #0-#6, that are set to 1, get their values from this bit; bits #0-#6, that are set to 0, are left unchanged.\n",

"$dc0e":
         "Timer A control register. Bits:\n" +
         " * Bit #0: 0 = Stop timer; 1 = Start timer.\n" +
         " * Bit #1: 1 = Indicate timer underflow on port B bit #6.\n" +
         " * Bit #2: 0 = Upon timer underflow, invert port B bit #6; 1 = upon timer underflow, generate a positive edge on port B bit #6 for 1 system cycle.\n" +
         " * Bit #3: 0 = Timer restarts upon underflow; 1 = Timer stops upon underflow.\n" +
         " * Bit #4: 1 = Load start value into timer.\n" +
         " * Bit #5: 0 = Timer counts system cycles; 1 = Timer counts positive edges on CNT pin.\n" +
         " * Bit #6: Serial shift register direction; 0 = Input, read; 1 = Output, write.\n" +
         " * Bit #7: TOD speed; 0 = 60 Hz; 1 = 50 Hz.\n",

"$dc0f":
         "Timer B control register. Bits:\n" +
         " * Bit #0: 0 = Stop timer; 1 = Start timer.\n" +
         " * Bit #1: 1 = Indicate timer underflow on port B bit #7.\n" +
         " * Bit #2: 0 = Upon timer underflow, invert port B bit #7; 1 = upon timer underflow, generate a positive edge on port B bit #7 for 1 system cycle.\n" +
         " * Bit #3: 0 = Timer restarts upon underflow; 1 = Timer stops upon underflow.\n" +
         " * Bit #4: 1 = Load start value into timer.\n" +
         " * Bits #5-#6: %00 = Timer counts system cycles; %01 = Timer counts positive edges on CNT pin; %10 = Timer counts underflows of timer A; %11 = Timer counts underflows of timer A occurring along with a positive edge on CNT pin.\n" +
         " * Bit #7: 0 = Writing into TOD registers sets TOD; 1 = Writing into TOD registers sets alarm time.\n",

}
