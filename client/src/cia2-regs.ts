
export let cia2regs:any = {

"$dd00": "Port A, serial bus access. Bits:\n" +
         " * Bits #0-#1: VIC bank. Values:\n" +
         "   * %00, 0: Bank #3, $C000-$FFFF, 49152-65535.\n" +
         "   * %01, 1: Bank #2, $8000-$BFFF, 32768-49151.\n" +
         "   * %10, 2: Bank #1, $4000-$7FFF, 16384-32767.\n" +
         "   * %11, 3: Bank #0, $0000-$3FFF, 0-16383.\n" +
         " * Bit #2: RS232 TXD line, output bit.\n" +
         " * Bit #3: Serial bus ATN OUT; 0 = High; 1 = Low.\n" +
         " * Bit #4: Serial bus CLOCK OUT; 0 = High; 1 = Low.\n" +
         " * Bit #5: Serial bus DATA OUT; 0 = High; 1 = Low.\n" +
         " * Bit #6: Serial bus CLOCK IN; 0 = Low; 1 = High.\n" +
         " * Bit #7: Serial bus DATA IN; 0 = Low; 1 = High.\n",

"$dd01": "Port B, RS232 access.\n" +
         " * Read bits:\n" +
         "   * Bit #0: RS232 RXD line, input bit.\n" +
         "   * Bit #3: RS232 RI line.\n" +
         "   * Bit #4: RS232 DCD line.\n" +
         "   * Bit #5: User port H pin.\n" +
         "   * Bit #6: RS232 CTS line; 1 = Sender is ready to send.\n" +
         "   * Bit #7: RS232 DSR line; 1 = Receiver is ready to receive.\n" +
         " * Write bits:\n" +
         "   * Bit #1: RS232 RTS line. 1 = Sender is ready to send.\n" +
         "   * Bit #2: RS232 DTR line. 1 = Receiver is ready to receive.\n" +
         "   * Bit #3: RS232 RI line.\n" +
         "   * Bit #4: RS232 DCD line.\n" +
         "   * Bit #5: User port H pin.\n",

"$dd02": "Port A data direction register.\n" +
         " * Bit #x: 0 = Bit #x in port A can only be read; 1 = Bit #x in port A can be read and written.\n",

"$dd03": "Port B data direction register.\n" +
         " * Bit #x: 0 = Bit #x in port B can only be read; 1 = Bit #x in port B can be read and written.\n",

"$dd04": "Timer A (Low byte).\n" +
         " * Read: Current timer value.\n" +
         " * Write: Set timer start value.\n",

"$dd05": "Timer A (High byte).\n" +
         " * Read: Current timer value.\n" +
         " * Write: Set timer start value.\n",

"$dd06": "Timer B (Low byte).\n" +
         " * Read: Current timer value.\n" +
         " * Write: Set timer start value.\n",

"$dd07": "Timer B (High byte).\n" +
         " * Read: Current timer value.\n" +
         " * Write: Set timer start value.\n",

"$dd08": "Time of Day, tenth seconds (in BCD). Values: $00-$09.\n" +
         " * Read: Current TOD value.\n" +
         " * Write: Set TOD or alarm time.\n",

"$dd09": "Time of Day, seconds (in BCD). Values: $00-$59.\n" +
         " * Read: Current TOD value.\n" +
         " * Write: Set TOD or alarm time.\n",

"$dd0a": "Time of Day, minutes (in BCD). Values: $00-$59.\n" +
         " * Read: Current TOD value.\n" +
         " * Write: Set TOD or alarm time.\n",

"$dd0b": "Time of Day, hours (in BCD).\n" +
         " * Read bits:\n" +
         "   * Bits #0-#5: Hours.\n" +
         "   * Bit #7: 0 = AM; 1 = PM.\n" +
         " * Write: Set TOD or alarm time.\n",

"$dd0c": "Serial shift register. (Bits are read and written upon every positive edge of the CNT pin.)",

"$dd0d": "Interrupt control and status register.\n" +
         " * Read bits:\n" +
         "   * Bit #0: 1 = Timer A underflow occurred.\n" +
         "   * Bit #1: 1 = Timer B underflow occurred.\n" +
         "   * Bit #2: 1 = TOD is equal to alarm time.\n" +
         "   * Bit #3: 1 = A complete byte has been received into or sent from serial shift register.\n" +
         "   * Bit #4: Signal level on FLAG pin.\n" +
         "   * Bit #7: A non-maskable interrupt has been generated.\n" +
         " * Write bits:\n" +
         "   * Bit #0: 1 = Enable non-maskable interrupts generated by timer A underflow.\n" +
         "   * Bit #1: 1 = Enable non-maskable interrupts generated by timer B underflow.\n" +
         "   * Bit #2: 1 = Enable TOD alarm non-maskable interrupt.\n" +
         "   * Bit #3: 1 = Enable non-maskable interrupts generated by a byte having been received/sent via serial shift register.\n" +
         "   * Bit #4: 1 = Enable non-maskable interrupts generated by positive edge on FLAG pin.\n" +
         "   * Bit #7: Fill bit; bits #0-#6, that are set to 1, get their values from this bit; bits #0-#6, that are set to 0, are left unchanged.\n",

"$dd0e": "Timer A control register. Bits:\n" +
         " * Bit #0: 0 = Stop timer; 1 = Start timer.\n" +
         " * Bit #1: 1 = Indicate timer underflow on port B bit #6.\n" +
         " * Bit #2: 0 = Upon timer underflow, invert port B bit #6; 1 = upon timer underflow, generate a positive edge on port B bit #6 for 1 system cycle.\n" +
         " * Bit #3: 0 = Timer restarts upon underflow; 1 = Timer stops upon underflow.\n" +
         " * Bit #4: 1 = Load start value into timer.\n" +
         " * Bit #5: 0 = Timer counts system cycles; 1 = Timer counts positive edges on CNT pin.\n" +
         " * Bit #6: Serial shift register direction; 0 = Input, read; 1 = Output, write.\n" +
         " * Bit #7: TOD speed; 0 = 60 Hz; 1 = 50 Hz.\n",

"$dd0f": "Timer B control register. Bits:\n" +
         " * Bit #0: 0 = Stop timer; 1 = Start timer.\n" +
         " * Bit #1: 1 = Indicate timer underflow on port B bit #7.\n" +
         " * Bit #2: 0 = Upon timer underflow, invert port B bit #7; 1 = upon timer underflow, generate a positive edge on port B bit #7 for 1 system cycle.\n" +
         " * Bit #3: 0 = Timer restarts upon underflow; 1 = Timer stops upon underflow.\n" +
         " * Bit #4: 1 = Load start value into timer.\n" +
         " * Bits #5-#6: %00 = Timer counts system cycles; %01 = Timer counts positive edges on CNT pin; %10 = Timer counts underflows of timer A; %11 = Timer counts underflows of timer A occurring along with a positive edge on CNT pin.\n" +
         " * Bit #7: 0 = Writing into TOD registers sets TOD; 1 = Writing into TOD registers sets alarm time.\n",

}
